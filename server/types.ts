import {
	PublicKeyCredentialCreationOptionsJSON,
	PublicKeyCredentialRequestOptionsJSON,
} from "@simplewebauthn/server/esm/deps";
import { FastifyReply, FastifyRequest } from "fastify";

export interface JWT_REGISTERED_CLAIMS {
	/**
	 * Identifies the principal that issued the JWT. It specifies the issuer of the token.
	 */
	iss?: string;
	/**
	 * Identifies the principal that is the subject of the JWT. It typically represents the user or entity associated with the token.
	 */
	sub?: Buffer;
	/**
	 * Specifies the recipients that the JWT is intended for. It limits the usability of the token to a particular audience.
	 */
	aud?: string;
	/**
	 * Specifies the expiration time after which the JWT should not be accepted for processing. It provides a time limit on the tokenâ€™s validity.
	 */
	exp?: number;
	/**
	 * Specifies the time before which the JWT must not be accepted for processing. It indicates the time when the token becomes valid.
	 */
	nbf?: number;
	/**
	 * Specifies the time at which the JWT was issued. It can be used to determine the age of the token.
	 */
	iat?: number;
	/**
	 * Provides a unique identifier for the JWT. It can be used to prevent JWT reuse and to maintain token uniqueness.
	 */
	jti?: string;
	/**
	 * Custom claim asserting whether the user is an administrator.
	 */
	adm?: boolean;
	/**
	 * Custom claim containing user roles (e.g. admin, moderator, etc...) by their role ids.
	 */
	rls?: number[];
	/**
	 * Custom claim. Recommended that the key length is 3 characters long.
	 */
	[key: string]: any;
}

export interface LoginStatus {
	/**
	 * The JWT payload.
	 */
	payload: JWT_REGISTERED_CLAIMS | null;
	/**
	 * Whether the JWT is valid. This takes into account expiration, revocation, etc.
	 */
	valid: boolean;
	/**
	 * An object containing the cookies to be set in the response.
	 */
	setCookies: SetCookieOptions[];
	/**
	 * An array of error messages.
	 */
	errors?: string[];
}

export interface RevokedRefreshToken {
	/**
	 * The id of the revoked refresh token, generated by UUIDv4 and represented as a Buffer.
	 */
	token_id: Buffer;
	/**
	 * The expiration time of the revoked refresh token.
	 */
	expires_at: Date;
}

export interface Email {
	email: string;
	is_primary: boolean;
	created_at: Date;
}
export interface Passkey {
	/**
	 * The id of the passkey, generated by UUIDv4 and represented as a Buffer.
	 */
	id: Buffer;
	/**
	 * The id of the user who owns the passkey, generated by UUIDv4 and represented as a Buffer.
	 */
	user_id?: Buffer;
	/**
	 * The credential id of the passkey.
	 */
	credential_id: string;
	/**
	 * The public key of the passkey.
	 */
	public_key: string;
	/**
	 * Counter.
	 */
	counter: number;
	/**
	 * Passkey transports.
	 */
	transports: string;
}
export class User {
	emails?: Email[];
	roles?: string[];
	passkeys?: Passkey[];
	/**
	 * The id of the user, generated by UUIDv4 and represented as a Buffer.
	 */
	id: Buffer;
	/**
	 * The salt of the password, generated by UUIDv4 and represented as text.
	 */
	salt?: Buffer | null;
	/**
	 * The hashed password of the user, represented as text.
	 */
	password?: Buffer | null;
	/**
	 * The date the user was created.
	 */
	created_at?: Date;
	constructor(id: Buffer, salt: Buffer, password: Buffer, created_at: Date) {
		this.id = id;
		this.salt = salt;
		this.password = password;
		this.created_at = created_at;
	}
}
export interface UserRole {
	role_id: number;
	user_id: Buffer;
}

type collectionTypes =
	| "email"
	| "binary"
	| "choice"
	| "create-password"
	| "get-password";
export interface CollectAction {
	action: "collect";
	type: collectionTypes;
	/**
	 * A header to display during collection.
	 */
	header: string;
	/**
	 * A message to display during collection.
	 */
	message: string;
	/**
	 * An array of options for collection type "choice".
	 */
	options?: string[];
}
export interface RegisterPasskeyAction {
	action: "register-passkey";
	WebAuthnOptions: PublicKeyCredentialCreationOptionsJSON;
}
export interface AuthenticatePasskeyAction {
	action: "authenticate-passkey";
	WebAuthnOptions: PublicKeyCredentialRequestOptionsJSON;
}
export interface ShowUsePasskeyButtonAction {
	action: "show-use-passkey-button";
}
export interface InitConditionalUIAction {
	action: "init-conditional-ui";
}
export interface ExitAction {
	action: "exit";
}
export interface SetAuthenticationOptionsAction {
	action: "set-authentication-options";
	authenticationOptions: PublicKeyCredentialRequestOptionsJSON;
}
export interface RedirectAction {
	action: "redirect";
	path: string;
}
export type Action =
	| CollectAction
	| RegisterPasskeyAction
	| AuthenticatePasskeyAction
	| ShowUsePasskeyButtonAction
	| InitConditionalUIAction
	| ExitAction
	| SetAuthenticationOptionsAction
	| RedirectAction;

export interface SetCookieOptions {
	name: string;
	value: string;
	expires?: Date;
	httpOnly?: boolean;
	signed?: boolean;
	secure?: boolean;
	path?: string;
	sameSite?: "strict" | "lax" | "none";
}
export interface LoginData {
	/**
	 * An object of cookies to be set in the response.
	 */
	setCookies?: SetCookieOptions[];
	actions?: Action[];
	data?: object;
}

export interface LoginInitializationOptions {
	supportsWebAuthn: boolean;
	supportsConditionalUI: boolean;
}
export interface LoginDataReturn {
	request: FastifyRequest;
	reply: FastifyReply;
	json: {
		[key: string]: any;
	};
}
